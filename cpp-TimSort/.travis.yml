language: cpp

_packages:
  - &clang clang-3.8
  - &gcc g++-5

_apt: &apt-common
  sources:
    - llvm-toolchain-trusty-3.8
    - ubuntu-toolchain-r-test

matrix:
  include:

    # Linux clang
    - os: linux
      sudo: required
      env: BUILD_TYPE=Debug USE_VALGRIND=true CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *clang
            - *gcc
            - valgrind
      compiler: clang

    - os: linux
      sudo: required
      env: BUILD_TYPE=Debug SANITIZE=undefined CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *clang
            - *gcc
      compiler: clang

    - os: linux
      sudo: required
      env: BUILD_TYPE=Debug SANITIZE=address CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *clang
            - *gcc
      compiler: clang

    - os: linux
      sudo: required
      env: BUILD_TYPE=Release CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *clang
            - *gcc
      compiler: clang

    # Linux gcc
    - os: linux
      sudo: false
      env: BUILD_TYPE=Debug USE_VALGRIND=true CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *gcc
            - valgrind
      compiler: gcc

    - os: linux
      sudo: false
      env: BUILD_TYPE=Debug SANITIZE=undefined CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *gcc
      compiler: gcc

    - os: linux
      sudo: false
      env: BUILD_TYPE=Debug SANITIZE=address CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *gcc
      compiler: gcc

    - os: linux
      sudo: false
      env: BUILD_TYPE=Release CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *gcc
      compiler: gcc

    # OSX clang
#    - os: osx
#      osx_image: xcode9.2
#      env: BUILD_TYPE=Debug USE_VALGRIND=true CMAKE_GENERATOR="Xcode"
#      addons:
#        homebrew:
#          update: true
#          packages:
#            - ccache
#            - cmake
#            - valgrind
#      compiler: clang

    - os: osx
      osx_image: xcode8.3
      env: BUILD_TYPE=Release CMAKE_GENERATOR="Xcode"
      addons:
        homebrew:
          update: true
          packages:
            - ccache
            - cmake
      compiler: clang

    # Windows GCC
    - os: windows
      env: BUILD_TYPE=Debug CMAKE_GENERATOR="MinGW Makefiles"
      language: sh
      compiler: gcc

    - os: windows
      env: BUILD_TYPE=Release CMAKE_GENERATOR="MinGW Makefiles"
      language: sh
      compiler: gcc

    # Windows MSVC (using a pseudo-generator)
    - os: windows
      env: BUILD_TYPE=Debug CMAKE_GENERATOR="MSVC"
      compiler: msvc

    - os: windows
      env: BUILD_TYPE=Release CMAKE_GENERATOR="MSVC"
      compiler: msvc

install:
  - if [[ $CXX = "g++" ]]; then export CXX="g++-5"; fi
  - if [[ $CXX = "clang++" ]]; then export CXX="clang++-3.8"; fi

script:
  - if [[ $CMAKE_GENERATOR = "MSVC" ]]; then
        cmake -H. -Bbuild
              -DCMAKE_CONFIGURATION_TYPES="${BUILD_TYPE}"
              -DBUILD_BENCHMARKS=ON;
    else
        cmake -H. -Bbuild
              -DCMAKE_CONFIGURATION_TYPES="${BUILD_TYPE}"
              -DCMAKE_BUILD_TYPE="${BUILD_TYPE}"
              -DGFX_TIMSORT_SANITIZE="${SANITIZE}"
              -DGFX_TIMSORT_USE_VALGRIND=${USE_VALGRIND}
              -G"${CMAKE_GENERATOR}"
              -DCMAKE_SH="CMAKE_SH-NOTFOUND"
              -DBUILD_BENCHMARKS=ON;
    fi
  - if [[ $CMAKE_GENERATOR = "MSVC" || $TRAVIS_OS_NAME = "osx" ]]; then
        cmake --build build --config ${BUILD_TYPE} -j 2;
    else
        cmake --build build --config ${BUILD_TYPE} -- -j2;
    fi
  - cd build
  - if [[ $USE_VALGRIND = true ]]; then
        travis_wait 50 ctest -T memcheck -C ${BUILD_TYPE} --output-on-failure -j 4;
    else
        travis_wait ctest -C ${BUILD_TYPE} --output-on-failure;
    fi

after_failure:
  - if [[ $USE_VALGRIND = true ]]; then
        find ./Testing/Temporary -type f -name "MemoryChecker.*.log" -size +1300c | xargs cat;
    fi

notifications:
  email: false
